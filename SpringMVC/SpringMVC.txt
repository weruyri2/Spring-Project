SpringMVC.txt

* CRUD : 웹프로그램 개발의 기초틀

* 개발 목표 :개발 시점 이전에 신경써야하는 부분을 파악/처리가능,
개발 중 올바른 방향으로 진행중인지 확인
=> 개발이 쉬워진다.
* 권장 개발 순서 : 
0) 요구사항 분석
1) 데이터베이스 (SQL, DAO)
	- DB 생성 , 계정 생성
	- 데이터 설계, 생성 (ERD)
	- 더미 데이터 추가
2) 컨트롤러 + 비지니스 로직
	- 패키지 구조 작성
	- 역할 분담
	- 테스트 방법 결정
3) 화면 (view)
	- 화면 방식의 결정
	- 절대/상대 경로

	pageContext.request.contextPath
	=> 해당프로젝트에 포함되어 있는 외부 파일을 추가시 
	해당 경로 찾아가도록 설정 (resources 폴더)
	* Servlet 2.4이하의 경우 EL표현식을 사용 할 수 없음
	JSTL-core 라이브러리 사용
	<c:out value="${pageContext.request.contextPath}"/>
	
	*영속계층 개발 (persistence)
	
	-테이블 생성
	-도메인 클래스 생성 => DTO/VO => 테이블 저장 객체
	-DAO, DAOImpl 객체 생성
	-Mapper 생성(SQL)
	
	
	* 비지니스 계층 개발 (Service)
	- 사용자의 요구사항을 반영하는 영역
	- XXXService 인터페이스 (동작 선언) -> XXXServiceImpl 객체(구현)
	- 컨트롤러와 DAO 사이의 연결(다리)
	- 완충 영역(다른 처리로직이나, 디비와 상관없이 처리 됨)
	- 컨트롤러,영속계층에 대한 종속성이 줄어든다. => 각각의 처리로직에 집중
	
	* 컨트롤러 계층 개발 (Controller)
	- 컨트롤러 & 뷰 (마지막 동작0
	- 시간이 오래 걸림
	
	- 동일한 동작에 대한 주소(URI 처리), 기능별 주소(URI)
	- 동작에 대한 호출 방식을 지정 (GET,POST)
	- 페이지 이동방식(리다이렉트,포워드)
	- 모듈 단위로 컨트롤러 작성
	
	- 동작에 대한 호출 방식을 지정 (GET,POST)
	GET : 즉시 호출/조회가 가능한 페이지
	POST : 작업을 처리해야하는경우
	
	* 예외처리
	페이지 호출이 발생하는 컨트롤러에서 처리
	1) @ExceptionHandler 어노테이션 사용
	2) @ControllerAdvice 어노테이션 사용 -> 컨트롤러 작성
	3) @ResponseStatus 어노테이션 사용 (Http 상태코드 처리)
	
	2) @ControllerAdvice 어노테이션 사용 -> 컨트롤러 작성
	-> 메서드를 통해서 예외처리 (@ExceptionHandler 참고)
	
	
	* 화면 하단의 페이징 처리
	(이전, 1,2,3 .....10 , 다음)
	
	총 글 122개, 한번에 10개의 데이터 출력
	
	시작페이지 번호(startPage)
	끝 페이지 번호(endPage)
	전체 데이터 개수 (totalCount)
	이전 페이지 링크(prev)
	이후 페이지 링크(next)	
	
	